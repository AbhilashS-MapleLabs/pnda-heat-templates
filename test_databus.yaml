heat_template_version: 2014-10-16

parameters:
  SaltmasterFlavor:
    type: string
    description: Falvor for the salmaster nodes
    default: m1.small
  BastionFlavor:
    type: string
    description: Flavor for the bastion nodes
    default: m1.small
  ZookeeperFlavor:
    type: string
    description: Flavor for the zookeeper nodes
    default: m1.small
  KafkaFlavor:
    type: string
    description: Flavor for the kafka nodes
    default: m1.small
  DatanodeFlavor:
    type: string
    description: Flavor for the data nodes
    default: m1.large
  CMFlavor:
    type: string
    description: Flavor for the data nodes
    default: m1.small
  ToolsFlavor:
    type: string
    description: Flavor for the tools nodes
    default: m1.small
  LogserverFlavor:
    type: string
    description: Flavor for the tools nodes
    default: m1.small

  image_id:
    type: string
    description: default image for pnda servers
    default: PndaDEV-trusty-cloud-user-x86_64

  ToolsNodes:
    default: '1'
    description: Number of TOOLS nodes
    type: string
  ZookeeperNodes:
    default: '1'
    description: Number of ZOOKEEPER nodes
    type: string
  KafkaNodes:
    default: '1'
    description: Number of KAFKA nodes
    type: string
  DataNodes:
    default: '3'
    description: Number of DATA nodes
    type: string
  ManagerNodes:
    default: '1'
    description: Number of DATA nodes
    type: string

  DatanodeVolumeSize:
    default: 200
    type: number
  DatanodeMountpoint:
    default: /dev/vdb
    type: string

  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    description: Name of private network to be created
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    description: Private network gateway address
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool
  name_servers:
    description: List of name name servers
    type: string
  KeyName:
    description: Name of an existing KeyPair to enable SSH access to the instances
    type: string
  git_private_key_file:
    description: private key file for cloning from git
    type: string

resources:
  Key:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: { get_param: 'OS::stack_name' }

  private_net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template:
            stackname_network
          params:
            stackname: { get_param: 'OS::stack_name' }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }
      dns_nameservers: { get_param: name_servers }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  ZKSecGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for Data Nodes
      name:
        str_replace:
          template:
            cname-sk
          params:
            cname: { get_param: 'OS::stack_name' }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  KafkaSecGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for Kafka Nodes
      name:
        str_replace:
          template:
            cname-kafka
          params:
            cname: { get_param: 'OS::stack_name' }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  # DNSecGroup:
  #   type: OS::Neutron::SecurityGroup
  #   properties:
  #     description: Add security group rules for Data Nodes
  #     name: DNSecGroup
  #     rules:
  #       - remote_ip_prefix: 0.0.0.0/0
  #         protocol: tcp
  #         port_range_min: 22
  #         port_range_max: 22
  #       - remote_ip_prefix: 0.0.0.0/0
  #         protocol: icmp

  ToolsSecGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for Data Nodes
      name:
        str_replace:
          template:
            cname-tools
          params:
            cname: { get_param: 'OS::stack_name' }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  saltmaster:
    type: OS::Pnda::saltmaster
    depends_on: router
    properties:
      Flavor: { get_param: SaltmasterFlavor }
      Image: { get_param: image_id }
      KeyName: { get_resource: Key }
      name:
        str_replace:
          template: '%stackname%-saltmaster'
          params:
            '%stackname%': {get_param: 'OS::stack_name'}
      PrivateSubnet: { get_resource: private_subnet }
      PrivateNet: { get_resource: private_net }
      GitPrivateKey: { get_file: deploy }
      cluster_name: {get_param: 'OS::stack_name'}

  # cm:
  #   type: OS::Pnda::cm
  #   depends_on: router
  #   depends_on: private_subnet
  #   properties:
  #     Flavor: { get_param: CMFlavor }
  #     Image: { get_param: image_id }
  #     KeyName: { get_resource: Key }
  #     name:
  #       str_replace:
  #         template: '%stackname%-cm'
  #         params:
  #           '%stackname%': {get_param: 'OS::stack_name'}
  #     PrivateNet: { get_resource: private_net }
  #     PrivateSubnet: { get_resource: private_subnet }
  #     SaltmasterIP: { get_attr: ['saltmaster', 'first_address'] }

  # logserver:
  #   type: OS::Pnda::cm
  #   depends_on: private_subnet
  #   depends_on: router
  #   properties:
  #     Flavor: { get_param: LogserverFlavor }
  #     Image: { get_param: image_id }
  #     KeyName: { get_resource: Key }
  #     name:
  #       str_replace:
  #         template: '%stackname%-logserver'
  #         params:
  #           '%stackname%': {get_param: 'OS::stack_name'}
  #     PrivateNet: { get_resource: private_net }
  #     PrivateSubnet: { get_resource: private_subnet }
  #     SaltmasterIP: { get_attr: ['saltmaster', 'first_address'] }

  bastion:
    type: OS::Pnda::bastion
    depends_on: private_subnet
    depends_on: router
    properties:
      Flavor: { get_param: BastionFlavor }
      Image: { get_param: image_id }
      KeyName: { get_resource: Key }
      name:
        str_replace:
          template: '%stackname%-bastion'
          params:
            '%stackname%': {get_param: 'OS::stack_name'}
      PrivateNet: { get_resource: private_net }
      PrivateSubnet: { get_resource: private_subnet }
      PublicNet: { get_param: public_net }
      SaltmasterIP: { get_attr: ['saltmaster', 'first_address'] }
      private_key: { get_attr: ['Key','private_key']}
      cluster_name: {get_param: 'OS::stack_name'}
      
  kafka:
    type: OS::Heat::ResourceGroup
    depends_on: private_subnet
    depends_on: router
    properties:
      count: { get_param: KafkaNodes }
      resource_def:
        type: OS::Pnda::kafka
        properties:
          Flavor: { get_param: KafkaFlavor }
          Image: { get_param: image_id }
          KeyName: { get_resource: Key }
          name:
            str_replace:
              template: '%stackname%-kafka-%index%'
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
          NodeIndex: '%index%'
          PrivateNet: { get_resource: private_net }
          PrivateSubnet: { get_resource: private_subnet }
          SaltmasterIP: { get_attr: ['saltmaster', 'first_address'] }
          sec_group: { get_resource: KafkaSecGroup }
          cluster_name: {get_param: 'OS::stack_name'}

  # dn:
  #   type: OS::Heat::ResourceGroup
  #   depends_on: private_subnet
  #   depends_on: router
  #   properties:
  #     count: { get_param: DataNodes }
  #     resource_def:
  #       type: OS::Pnda::dn
  #       properties:
  #         Flavor: { get_param: DatanodeFlavor }
  #         Image: { get_param: image_id }
  #         KeyName: { get_resource: Key }
  #         name:
  #           str_replace:
  #             template: '%stackname%-dn-%index%'
  #             params:
  #               '%stackname%': {get_param: 'OS::stack_name'}
  #         NodeIndex: '%index%'
  #         PrivateNet: { get_resource: private_net }
  #         PrivateSubnet: { get_resource: private_subnet }
  #         SaltmasterIP: { get_attr: ['saltmaster', 'first_address'] }
  #         sec_group: { get_resource: DNSecGroup }
  #         volume_size: { get_param: DatanodeVolumeSize }
  #         mountpoint: { get_param: DatanodeMountpoint }

  zookeeper:
    type: OS::Heat::ResourceGroup
    depends_on: private_subnet
    depends_on: router
    properties:
      count: { get_param: ZookeeperNodes }
      resource_def:
        type: OS::Pnda::zookeeper
        properties:
          Flavor: { get_param: ZookeeperFlavor }
          Image: { get_param: image_id }
          KeyName: { get_resource: Key }
          name:
            str_replace:
              template: '%stackname%-zookeeper-%index%'
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
          NodeIndex: '%index%'
          PrivateNet: { get_resource: private_net }
          PrivateSubnet: { get_resource: private_subnet }
          SaltmasterIP: { get_attr: ['saltmaster', 'first_address'] }
          sec_group: { get_resource: ZKSecGroup }
          cluster_name: {get_param: 'OS::stack_name'}

  tools:
    type: OS::Heat::ResourceGroup
    depends_on: private_subnet
    depends_on: router
    properties:
      count: { get_param: ToolsNodes }
      resource_def:
        type: OS::Pnda::tools
        properties:
          Flavor: { get_param: ToolsFlavor }
          Image: { get_param: image_id }
          KeyName: { get_resource: Key }
          name:
            str_replace:
              template: '%stackname%-tools-%index%'
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
          NodeIndex: '%index%'
          PrivateNet: { get_resource: private_net }
          PrivateSubnet: { get_resource: private_subnet }
          SaltmasterIP: { get_attr: ['saltmaster', 'first_address'] }
          sec_group: { get_resource: ToolsSecGroup }
          cluster_name: {get_param: 'OS::stack_name'}

outputs:
  zookeeper_hosts: 
    value: { get_attr: [zookeeper, hosts_entry] }
  # datanode_hosts:
  #   value: { get_attr: [dn, hosts_entry] }
  kafka_hosts:
    value: { get_attr: [kafka, hosts_entry] }
  tools_hosts:
    value: { get_attr: [tools, hosts_entry] }

